package javaapplication1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * This class is thread safe.
 */
public class Parser {

    private File file;

    public synchronized void setFile(File f) {
        file = f;
    }

    public synchronized File getFile() {
        return file;
    }

    public String getContent() throws IOException {
        FileInputStream i = new FileInputStream(file);
        String output = "";
        int data;
        while ((data = i.read()) > 0) {
            output += (char) data;
        }
        return output;
    }

    public String getContentWithoutUnicode() throws IOException {
        FileInputStream i = new FileInputStream(file);
        String output = "";
        int data;
        while ((data = i.read()) > 0) {
            if (data < 0x80) {
                output += (char) data;
            }
        }
        return output;
    }

    public void saveContent(String content) throws FileNotFoundException {
        FileOutputStream o = new FileOutputStream(file);
        try {
            for (int i = 0; i < content.length(); i += 1) {
                o.write(content.charAt(i));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


1 - (line 46)    falta el throw de la posible excepcion  
2 - (line 39)    excluye data del archivo
3 - (line 28)    puede usar Files.readAllBytes
4 - (line 25,35) la variable i no es un nombre claro
5 - (line 53)    deberia ser manejada la excepcion para evitar caÃ­das en tiempo de ejecuci{on
6 - (line 46)    si el contenido va a ser string mejor usar Files.writeString
7 - (line 12)    deberia ser manejada la existencia del archivo, si no lo encuentra se pueden controlar las excepciones
8 - (line 12)    parser, no es un nombre adecuado, es mas un repository, los principios de cÃ³digo limpio establecen que los nombres deben ser dicientes
9 - (line 16,20) uso inadecuado de synchronized, pueden generarse bloqueos cuando se requiera concurrencia, eso afecta el performance 
